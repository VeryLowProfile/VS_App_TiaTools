FUNCTION_BLOCK "FB_Analog_IN"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      Signal : Int;
   END_VAR

   VAR 
      Value : Real;
      Config : "Analog_IN_CONFIG";
      Alarm : "Analog_IN_ALARM";
      Aux : "Analog_IN_AUX";
      Hmi { S7_SetPoint := 'False'} : "Hmi_IO";
   END_VAR


BEGIN
	//********************************************************************//
	//Name: FB_Analog_IN
	//Version: 0.1
	//Description: Analogic IN Management
	//Developer: Topcast
	//********************************************************************//
	
	//PARAMETRI
	//********************************************************************//
	//Signal: Word di ingresso di tipo "int" dichiarata sulla tabella delle variabili PLC
	
	//ESEMPIO DI UTILIZZO
	//********************************************************************//
	//Dopo aver richiamato correttamente il blocco ed avere eseguito la configurazione si può accedere alla varei funzioni nel seguente modo.
	//Si fa riferimento alla variabile di esempio "INGRESSO_ANALOGICO" usata negli esempi precedenti
	//
	//Lettura del valore
	//MyValue := AI_INGRESSO_ANALOGICO.AnalogIN.Value
	//
	//Allarmi
	// MyAlarm1 := "AI_INGRESSO_ANALOGICO".AnalogIN.Alarm.HighLimitExceeded;
	// MyAlarm2 := "AI_INGRESSO_ANALOGICO".AnalogIN.Alarm.LowLimitExceeded;
	
	//Value
	//********************************************************************//
	IF NOT #Config.DoNotScale THEN
	    #Aux.SCALE_RET_VAL := SCALE(IN := #Signal,
	                            HI_LIM := #Config.HighScaleValue,
	                            LO_LIM := #Config.LowScaleValue,
	                            BIPOLAR := #Config.IsBipolar,
	                            OUT => #Value);
	ELSE
	    #Value := #Signal;
	END_IF;
	
	IF #Config.AddManualScaling THEN
	    #Value := #Value * #Config.ManualScalingValue;
	END_IF;
	
	IF #Config.AddManualCompensation THEN
	    #Value := #Value + #Config.ManualCompValue;
	END_IF;
	
	//AlarmDelay Delay
	//********************************************************************//
	//High Limit
	#Aux.T_HighLimit(IN := #Value > #Config.HighLimit AND #Config.HighLimit <> 0,
	                 PT := #Config.AlarmDelay);
	
	//Low Limit
	#Aux.T_LowLimit(IN := #Value < #Config.LowLimit AND #Config.LowLimit <> 0,
	                PT := #Config.AlarmDelay);
	
	//Sensor Fault
	#Aux.T_SensorFault(IN := (#Config.DoNotScale AND (#Signal > 27660 OR #Signal < -27660))
	                   OR (NOT #Config.DoNotScale AND #Aux.#SCALE_RET_VAL = 16#0008 AND (#Signal > 27648 OR #Signal < -27648)),
	                   PT := #Config.AlarmDelay);
	
	//Alarms
	//********************************************************************//
	IF #Config.EnableAlarm THEN
	    #Alarm.HighLimitExceeded := #Aux.T_HighLimit.Q;
	    #Alarm.LowLimitExceeded := #Aux.T_LowLimit.Q;
	    #Alarm.SensorError := #Aux.T_SensorFault.Q;
	END_IF;
	
	//Hmi
	//********************************************************************//
	#Hmi.Value := #Value;
	#Hmi.RawValue := #Signal;
	#Hmi.Alarm := #Alarm.HighLimitExceeded OR #Alarm.LowLimitExceeded OR #Alarm.SensorError;

END_FUNCTION_BLOCK

